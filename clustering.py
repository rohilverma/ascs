import numpy as np
import csv

from sklearn.cluster import AffinityPropagation

rna_distances = []
with open("combined_affinity.csv", "r", newline='') as f:
    readCSV = csv.reader(f, delimiter=',')
    for row in readCSV:
        rna_distances.append(row)

# delta = 1
for i in range(len(rna_distances)):
    for j in range(len(rna_distances[0])):
        rna_distances[i][j] = float(rna_distances[i][j])
        # rna_distances[i][j] = np.exp(- rna_distances[i][j] ** 2 / (2. * delta ** 2))
        # if rna_distances[i][j] == 0 and i != j:
        #     rna_distances[i][j] = 0.0000000001

print(len(rna_distances), len(rna_distances[0]))

from scipy.spatial.distance import pdist

from sklearn.preprocessing import StandardScaler

rna_distances = np.asarray(rna_distances)
# dist_matrix = pdist(rna_distances)
#
# from scipy.cluster.hierarchy import linkage, fcluster
#
# Z = linkage(dist_matrix, method='ward')
#
# fcluster = fcluster(Z, 2, criterion='distance')

# from sklearn.cluster import DBSCAN
# db = DBSCAN(metric='precomputed').fit_predict(rna_distances)

# af = AffinityPropagation(affinity='precomputed').fit(rna_distances)
#
# labels = af.labels_
# print(af.n_iter_, len(af.cluster_centers_indices_))

# labels = db.labels_
# print(labels)

# print(fcluster)

from sklearn.cluster import spectral_clustering
from sklearn import metrics
from sklearn.cluster import AgglomerativeClustering

# labels = spectral_clustering(rna_distances, n_clusters=10)
# print(len(labels)-np.count_nonzero(labels==1), np.count_nonzero(labels == 1))

# clinical_labels = [4, 1, 4, 4, 2, 4, 4, 4, 1, 2, 4, 4, 2, 1, 2, 2, 2, 4, 4, 2, 4, 1, 4, 4, 1, 3, 2, 2, 3, 4, 2, 2, 3, 3, 4, 4, 2, 4, 2, 3, 2, 1, 1, 4, 3, 3, 1, 4, 2, 2, 2, 2, 4, 1, 4, 3, 3, 4, 4, 2, 1, 1, 4, 4, 2, 4, 1, 3, 1, 1, 2, 4, 2, 4, 1, 3, 4, 4, 1, 2, 3, 2, 1, 2, 3, 3, 2, 2, 4, 4, 2, 4, 3, 4, 4, 3, 2, 3, 1, 1, 4, 2, 1, 2, 4, 2, 1, 4, 3, 2, 2, 4, 2, 1, 4, 4, 4, 4, 1, 1, 3, 1, 4, 1, 4, 2, 2, 2, 2, 3, 4, 1, 4, 3, 2, 2, 2, 1, 2, 1, 4, 2, 4, 2, 1, 4, 3, 2, 1, 2, 2, 2, 4, 4, 1, 1, 1, 4, 2, 1, 1, 3, 4, 1, 2, 2, 4, 2, 2, 2, 2, 2, 4, 1, 4, 2, 4, 1, 1, 4, 2, 4, 4, 3, 1, 2, 1, 1, 3, 4, 1, 3, 4, 2, 2, 2, 2, 1, 4, 1, 4, 2, 2, 4, 3, 2, 2, 1, 1, 4, 4, 3, 2, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 4, 3, 4, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 3, 1, 4, 4, 4, 2, 1, 1, 1, 1, 4, 2, 2, 3, 1, 2, 1, 1, 2, 2, 3, 2, 2, 4, 4, 4, 2, 3, 1, 1, 2, 3, 1, 2, 4, 1, 1, 1, 3, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 1, 4, 2, 2, 1, 3, 1, 1, 3, 4, 2, 2, 2, 2, 2, 1, 1, 4, 4, 3, 4, 1, 4, 1, 2, 1, 1, 4, 2, 1, 1, 1, 2, 2, 2, 2, 2, 4, 4, 2, 1, 1, 2, 4, 4, 1, 4, 1, 4, 2, 2, 1, 2, 1, 2, 4, 4, 2, 2, 4, 1, 3, 4, 1, 4, 2, 3, 2, 2, 2, 2, 4, 2, 2, 2, 3, 4, 4, 2, 4, 1, 2, 1, 2, 1, 1, 4, 1, 4, 2, 2, 2, 2, 3, 1, 1, 4, 1, 2, 4, 2, 1, 4, 2, 3, 1, 2, 2, 4, 1, 4, 1, 4, 3, 2, 1, 4, 1, 4, 3, 1, 2, 3, 3, 1, 1, 1, 2, 2, 1, 2, 1, 3, 2, 4, 2, 1, 3, 1, 2, 3, 4, 2, 2, 4, 2, 2, 4, 1, 2, 4, 1, 3, 2, 2, 2, 4, 2, 2, 2, 2, 2, 1, 2, 1, 4, 3, 2, 1, 1, 2, 4, 4, 1, 4, 1, 2, 2, 1, 2, 1, 1, 3, 2, 4, 2, 4, 2, 3, 2, 3, 1, 2, 3, 2, 2, 4, 1, 4, 4, 2, 4, 2, 2, 1, 4, 1, 1, 1, 4, 1, 2, 4, 2]
# clinical_labels = [2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1]
clinical_labels = [0, 10, 0, 0, 8, 0, 0, 0, 10, 2, 0, 0, 5, 9, 2, 8, 6, 0, 0, 5, 0, 9, 0, 0, 9, 3, 8, 4, 2, 0, 4, 6, 2, 2, 0, 0, 5, 0, 6, 3, 2, 10, 7, 0, 3, 3, 9, 0, 6, 6, 5, 6, 0, 9, 0, 3, 2, 0, 0, 6, 10, 9, 0, 0, 4, 0, 10, 1, 9, 11, 6, 0, 5, 0, 9, 3, 0, 0, 10, 8, 3, 5, 9, 6, 2, 3, 5, 6, 0, 0, 6, 0, 3, 0, 0, 3, 6, 2, 10, 10, 0, 8, 9, 5, 0, 5, 10, 0, 4, 8, 6, 0, 6, 9, 0, 0, 0, 0, 9, 10, 4, 9, 0, 9, 0, 8, 6, 6, 6, 3, 0, 10, 0, 3, 6, 6, 5, 7, 6, 7, 0, 6, 0, 5, 10, 0, 2, 8, 9, 5, 6, 6, 0, 0, 9, 7, 10, 0, 5, 10, 10, 2, 0, 10, 4, 5, 0, 8, 5, 6, 5, 6, 0, 5, 0, 6, 0, 10, 11, 0, 5, 0, 0, 4, 9, 6, 10, 10, 3, 0, 9, 4, 0, 5, 4, 8, 8, 7, 0, 7, 0, 6, 5, 0, 1, 5, 6, 9, 10, 0, 0, 3, 8, 0, 8, 6, 6, 9, 10, 9, 10, 10, 10, 7, 0, 3, 0, 10, 7, 10, 6, 5, 5, 9, 5, 5, 10, 6, 3, 7, 0, 0, 0, 6, 10, 11, 9, 11, 0, 6, 5, 1, 10, 5, 9, 10, 6, 5, 1, 5, 6, 0, 0, 0, 6, 1, 10, 11, 6, 3, 9, 8, 0, 10, 10, 10, 1, 11, 9, 7, 5, 6, 6, 5, 6, 6, 8, 3, 0, 9, 0, 2, 6, 7, 4, 9, 10, 4, 0, 6, 4, 8, 8, 6, 5, 10, 0, 0, 3, 0, 9, 0, 9, 6, 7, 9, 0, 5, 10, 9, 10, 5, 6, 6, 5, 6, 0, 0, 6, 10, 10, 6, 0, 0, 10, 0, 10, 0, 8, 5, 9, 5, 10, 6, 0, 0, 6, 8, 0, 9, 2, 0, 9, 0, 5, 4, 5, 5, 5, 2, 0, 8, 5, 8, 2, 0, 0, 8, 0, 9, 6, 10, 5, 10, 9, 0, 7, 0, 6, 4, 6, 8, 2, 9, 10, 0, 10, 2, 0, 6, 10, 0, 6, 3, 10, 6, 6, 0, 7, 0, 10, 0, 4, 5, 10, 0, 10, 0, 3, 9, 5, 3, 3, 10, 10, 9, 0, 5, 10, 6, 9, 4, 5, 0, 6, 9, 1, 9, 5, 1, 0, 5, 6, 0, 6, 6, 0, 7, 8, 0, 10, 4, 8, 5, 6, 0, 5, 6, 6, 2, 6, 10, 5, 7, 0, 3, 5, 7, 9, 5, 0, 0, 10, 0, 10, 6, 6, 10, 6, 9, 7, 1, 6, 0, 5, 0, 8, 3, 8, 3, 3, 6, 3, 4, 5, 0, 9, 0, 0, 6, 0, 6, 8, 10, 0, 10, 10, 10, 0, 7, 6, 0, 2]
# clinical_labels = [2, 5, 0, 2, 5, 2, 4, 2, 5, 1, 3, 0, 3, 4, 1, 5, 4, 1, 3, 3, 2, 4, 2, 1, 4, 3, 5, 2, 2, 3, 2, 4, 2, 2, 4, 1, 3, 3, 4, 3, 1, 5, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 4, 4, 3, 3, 2, 2, 3, 4, 5, 4, 2, 3, 2, 3, 5, 1, 4, 6, 4, 3, 3, 4, 4, 3, 2, 3, 5, 5, 3, 3, 4, 4, 2, 3, 3, 4, 4, 2, 4, 2, 3, 1, 4, 3, 4, 2, 5, 5, 3, 5, 4, 3, 3, 3, 5, 3, 4, 5, 4, 4, 4, 4, 2, 1, 1, 1, 4, 5, 4, 4, 3, 4, 3, 5, 4, 4, 4, 3, 4, 5, 4, 3, 4, 4, 3, 3, 4, 3, 3, 4, 3, 3, 5, 2, 2, 5, 4, 3, 4, 4, 2, 1, 4, 3, 5, 4, 3, 5, 5, 2, 0, 5, 2, 3, 4, 5, 3, 4, 3, 4, 3, 2, 2, 4, 3, 5, 6, 4, 3, 3, 1, 4, 4, 4, 5, 5, 3, 3, 4, 4, 1, 3, 2, 5, 5, 3, 3, 3, 1, 4, 3, 4, 1, 3, 4, 4, 5, 4, 3, 3, 5, 1, 5, 4, 4, 4, 5, 4, 5, 5, 5, 3, 3, 3, 1, 5, 3, 5, 4, 2, 2, 4, 3, 3, 5, 4, 3, 3, 2, 3, 3, 4, 5, 6, 4, 6, 4, 4, 3, 1, 5, 3, 4, 5, 4, 3, 1, 3, 4, 4, 4, 1, 4, 1, 5, 6, 4, 3, 4, 5, 3, 5, 5, 5, 1, 6, 4, 3, 3, 4, 4, 3, 4, 4, 5, 3, 3, 4, 3, 1, 4, 3, 4, 4, 5, 4, 2, 4, 2, 5, 5, 4, 2, 5, 1, 1, 3, 2, 4, 2, 4, 4, 3, 4, 4, 3, 5, 4, 5, 3, 4, 4, 3, 4, 3, 1, 4, 5, 5, 4, 3, 3, 5, 1, 5, 4, 5, 3, 4, 3, 5, 4, 3, 2, 4, 5, 3, 4, 2, 3, 4, 3, 3, 4, 3, 3, 3, 1, 3, 5, 3, 5, 2, 3, 3, 5, 3, 4, 4, 5, 3, 5, 4, 3, 3, 4, 4, 2, 4, 5, 2, 4, 5, 1, 5, 1, 2, 4, 5, 1, 4, 3, 5, 4, 4, 3, 3, 4, 5, 1, 4, 3, 5, 1, 5, 3, 3, 4, 3, 3, 3, 5, 5, 4, 0, 3, 5, 4, 4, 4, 3, 1, 4, 4, 1, 4, 3, 1, 3, 3, 4, 3, 4, 4, 1, 3, 5, 3, 5, 4, 5, 3, 4, 3, 3, 4, 4, 1, 4, 5, 3, 3, 0, 3, 3, 3, 4, 3, 4, 3, 5, 4, 5, 4, 4, 5, 4, 4, 3, 1, 4, 0, 3, 2, 5, 3, 5, 3, 1, 4, 3, 2, 3, 1, 4, 3, 3, 4, 3, 4, 5, 5, 1, 5, 5, 5, 4, 3, 4, 3, 1]

print(metrics.silhouette_score(rna_distances, labels))

# incorrect = 0
# for l1, l2 in zip(labels, clinical_labels):
#     if l1+1 != l2:
#         incorrect += 1
#
# print(incorrect)

print(clinical_labels.count(1), clinical_labels.count(2))

from matplotlib import pyplot as plt